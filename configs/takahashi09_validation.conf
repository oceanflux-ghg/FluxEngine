# OceanFlux Greenhouse Gases default climatology configuration file
# created 27/07/2016 Jamie Shutler, j.d.shutler@exeter.ac.uk
#

#
# Input datasets and identifiers, path/location definition needed for all entries
# Required input dataset names are: windu10, sstskin, sstfnd, ecmwf, pco2, sigma0, sig_wv_ht
# The data product name is the name of the data set within the netcdf file. This can be checked using 'ncdump -h <file.nc> | less'
# An example file is '20100101_OCF-SST-GLO-1M-100-MGD-OSTIA.nc' , where the data identifier is 'MGD-OSTIA' and data product name is
# 'analysed_sst_mean'
#
# Issues to note:
#  - All entries are case sensitive
#  - 
#
# Filepaths can contain the following tokens:
#    <YYYY>  - converted to 4 digit year, e.g. 1999
#    <YY>    - converted to 2 digit year, e.g.   99
#    <MM>	 - converted to two digit month, e.g. 01 for January
#	 <Mmm>	 - converted to three letter month abbreviation, e.g. Jan for January
#    <MMM>	 - uppercase three letter month abbreviation, e.g. JAN
#    <mmm>	 - lowercase three letter month abbreviation, e.g. jan
#
# In addition to these tokens, filename patterns can be specified using ? and * which
# follow the standard Unix glob behaviour.
#


# Location of source code (relative or absolute path)
src_home = fluxengine_src

# Flux calculation options. Valid options are 'bulk', 'rapid' or 'equilibrium'
# 'rapid' and 'equilibrium' are in relation to the flux model as described in
# Woolf et al., 2012.
flux_calc = bulk


# Sea surface temperature to use (valid options are 'yes' or 'no').
# If only one is enabled the other will be derived according to, i.e.:
# 		sstskin = sstfnd - 0.17K
# At least one must be selected.
use_sstskin = yes
use_sstfnd = no

# ...
sst_gradients = no
saline_skin_value = 0.0


# Latitude, longitude and time product names (these are taken from the sstskin data layer).
# Typically 'lat' and 'lon' unless using Takahashi which is 'latitude' and 'longitude'.
latitude_prod = latitude
longitude_prod = longitude
time_prod = time


# 
# Input data layers and their associated data variable names
# 
# Each input data layer is specified by its names and at least a path # and prod (netCDF
# variable name) using the name followed by a '_path' or '_prod' suffix, respectively. E.g.:
# sstskin_path = path/to/data.nc
# sstskin_prod = sst_skin_mean
# 
# Other suffixes can be used:
#   _path		    - Filepath to the netCDF (.nc) file containing this data.
#				      May be relative or absolute and can contain the tokens described above.
#	_prod           - The name of the variable within the netCDF file.
#	_stddev_prod    - Optional. Name of the variable containing standard deviation data.
#	_count_prod	    - Optional. Name of the variable containing count data.
#   _netCDFName     - Optional. Override the name which will be given to the data layer in the
#					- output netCDF file.
#	_minBound	    - Optional. Override the minimum allowed value.
#	_maxBound	    - Optional. Override the maximum allowed value.
#   _preprocessing	- Optional. A list of functions used to transform the data before it is used.
#					- Functions should be seperated by commas and are applied in order.
#					- Functions must be defined in src_home/data_preprocessing.py
#


# sst skin data inputs
sstskin_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
sstskin_prod = SST_t
sstskin_preprocessing = celsius_to_kelvin

# U10 wind data inputs
windu10_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
windu10_prod = wind_t

# sigma0 (radar backscatter) data inputs
#sigma0_path = data/validation_data/sigma0/<YYYY>/*<YYYY><MM>*_OCF-SI0-???-1M-*-*.nc
#sigma0_prod = sigma0_cal_mean


# significant wave height data inputs
#sig_wv_ht_path = data/validation_data/sig_wv_ht/<YYYY>/*<YYYY><MM>*_OCF-SSH-???-1M-*-*.nc
#sig_wv_ht_prod = swhcor_mean

# ice data
ice_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
ice_prod = sea_ice_coverage
ice_preprocessing = percent_to_proportion

# rain intensity data inputs
# two options, either 'trmm' or 'gpgp'
# TRMM is limited to +/-60 degrees latitude ie there are no rain data in polar and sub-polar regions
# GPCP is has full global coverage
#
#rain_data_selection = gpcp
#rain_path = data/validation_data/rain_gpcp/<YYYY>/gpcp_v22.<YYYY><MM>.nc
#rain_prod = Precip
#rain_preprocessing = transpose, flip_longitude, flip_latitude

# modelled air pressure data.
pressure_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
pressure_prod = pressure

# Salinity data
salinity_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
salinity_prod = salinity


#
# Option to tell FluxEngine to expect Takahashi or SOCAT data to be used for the 'pco2 ='
# definition below. This is needed as the lat grid between the two datasets are different.
# The OceanFluxGHG data netcdf description has lat -90 to +90, whereas the Takahashi data
# are +90 to -90.
# '= taka' for using Takashashi, '= socat' for SOCAT
# if 'taka' option selected then the 1.5 uatm per year increment is not added to the values in the flux calculation
# pCO2 and fCO2 are handled in the same way, so with the SOCAT option you can either use pCO2 or fCO2 data
#
pco2_data_selection = taka

vco2_air_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
vco2_air_prod = vCO2_air
#vco2_air_preprocessing = flip_longitude

pco2_air_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
pco2_air_prod = pCO2_air

pco2_sw_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
pco2_sw_prod = pCO2_sw
#pco2_sw_preprocessing = flip_longitude

pco2_sst_path = data/validation_data/takahashi09/M2001*<mmm>*.nc
pco2_sst_prod = SST_t
#pco2_sst_preprocessing = flip_longitude, kelvin_to_celsius

#
# Addional input datasets for the process indicator layers, directory path/location definition needed for all entries
# no identifiers exist for these
# These are only required if process indicator layers are turned on (i.e. if you're
# using the -l flag to ofluxghg_run)
#
#biology_path = data/validation_data/biology_ESACCI/ESACCI-OC-MAPPED-OC_PRODUCTS-MERGED-1M_MONTHLY_1degree_PML_OC4v6_QAA-<YYYY><MM>-fv0.95.nc
#biology_prod = chlor_a
#suspended_particles_path = data/validation_data/biology_ESACCI/ESACCI-OC-MAPPED-OC_PRODUCTS-MERGED-1M_MONTHLY_1degree_PML_OC4v6_QAA-<YYYY><MM>-fv0.95.nc
#suspended_particles_prod = Rrs_555
#sstgrad_path = data/validation_data/SST_gradients/<MM>-UKMO-L4LRfnd-GLOB-???-????-*.nc
#sstgrad_prod =gradient_fields
#atlantic_ocean_mask_path = data/World_Seas-IHO-mask.nc
#atlantic_ocean_mask_prod = sea-mask
#pacific_ocean_mask_path = data/World_Seas-IHO-mask.nc
#pacific_ocean_mask_prod = sea-mask
#southern_ocean_mask_path = data/World_Seas-IHO-mask.nc
#southern_ocean_mask_prod = sea-mask
#indian_ocean_mask_path = data/World_Seas-IHO-mask.nc
#indian_ocean_mask_prod = sea-mask
#longhurst_mask_path = data/Longhurst-provinces-mask.nc
#longhurst_mask_prod = sea-mask


#
# random noise switches for ensemble analyses, options are 'no' or 'yes'
# format is 'random_noise_<variable>, where <variable> matches one of the input dataset names
# currently we can only perturb the windu10, sstskin and sstfnd datasets
# the mean and stddev of the noise function used to perturb the data are set within the python flux processor
# using the known bias and rmse values for these datasets
# order of priority: any option of random noise is added first, then bias (see next option) is added
# noise can be added to multiple datasets simultaneously
# noise is added before any internal quality control
#
random_noise_windu10 = no
random_noise_sstskin = no
random_noise_sstfnd = no
random_noise_pco2 = no


# bias switches for uncertainty work, options are 'no' or 'yes'
# format is 'bias_<variable>, where <variable> matches one of the input dataset names
# currently we can perturb the windu10, sstskin, sstfnd, pCO2(water) datasets
# order of priority: any option of random noise (see previous option) is added first, then bias is added
# bias to pco2 data is set to the input pco2 data (ie before any temperature correction occurs)
# biases are added before any internal quality control
# multiple biases can be set.
#
# bias values, value needs to be a floating point number and there needs to be one entry for each of the bias switches
# defined above. units are wind (ms^-1), sstskin (degrees kelvin), sstfnd (degrees centigrade), pco2 (ppm)
# multiple biases can be set and bias values can be positive or negative.
# biases are added before any internal quality control
# note: bias to pco2 data is set to the input pco2 data (ie before any temperature correction occurs)
#
bias_windu10 = no
bias_windu10_value = 0.0

bias_sstskin = no
bias_sstskin_value = 0.0

bias_sstfnd = no
bias_sstfnd_value = 0.0

bias_pco2 = no
bias_pco2_value = 0.0

bias_k = no
bias_k_percent = no
bias_k_value = 0.0
bias_k_biology_value = 0.0
bias_k_wind_value = 0.0


#
# Selected k parameterisation. Options are:
# k_Ho2006, k_Nightingale2000, kt_OceanFluxGHG, k_Wanninkhof1992, k_Wanninkhof2013, 
# k_McGillis2001, k_Ho1997, kd_OceanFluxGHG_backscatter, kd_OceanFluxGHG_wind, 
# kb_OceanFluxGHG, kt_OceanFluxGHG_kd_wind, k_generic
#
# Additional parameters may be needed for some k parameterisation options, in which case
# these should be specified by name, e.g.:
# k_generic_sc = 660.0
#
k_parameterisation = k_generic

# generic k parameterisation
k_generic_sc = 660.0
k_generic_a0 = 0.0
k_generic_a1 = 0.0
k_generic_a2 = 0.26
k_generic_a3 = 0.0


#
# Weighting for kb and kd components of k_GoddijnMurphy_Fangohr2012 k parameterisation
# Setting both equal to 1.0 means that the total k will simply be a linear combination
# These need to both be valid real numbers
#
kd_weighting = 1.0
kb_weighting = 1.0

# asymmetry switch for OceanFlux k paramterisation
# default is 1.0 ie no asymmetry
# the option above 'k_t_OceanFluxGHG =' must be set to 'yes' for this to be used
#
kb_asymmetry = 1.00


# Rain specific components
# rain bias influence on sstskin
bias_sstskin_due_rain = no
# values for bias influence and conditions
bias_sstskin_due_rain_value = 0.0
bias_sstskin_due_rain_intensity = 0.0
bias_sstskin_due_rain_wind = 0.0

# enable flux due to wet deposition by rain ('yes' or 'no')
rain_wet_deposition = no

# enable additional linear additive k term due to rain ('yes' or 'no')
k_rain_linear_ho1997 = no
k_rain_nonlinear_h2012 = no


#
# Output directory for the resultant netcdf files
#
output_dir = output/validate_takahashi09
